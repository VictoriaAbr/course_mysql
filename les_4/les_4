-- Дорабатываем тестовые данные

DROP DATABASE vk;
CREATE DATABASE vk;

-- Переходим в папку с дампом и вполняем загрузку
-- mysql vk < vk.dump.sql

USE vk;

ALTER TABLE friendship ADD COLUMN rejected_at DATETIME AFTER confirmed_at;
ALTER TABLE friendship ADD COLUMN rejected_by_id INT AFTER rejected_at;

-- Таблица справочник городов
CREATE TABLE cities (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(130) COMMENT "Название города",
  country_id INT COMMENT "Ссылка на страну",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Города"; 

-- Таблица справочник стран
CREATE TABLE countries (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
  name VARCHAR(130) COMMENT "Название страны",
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Профили";

ALTER TABLE profiles MODIFY COLUMN gender ENUM('M', 'F');
SELECT * FROM profiles LIMIT 10;
ALTER TABLE profiles ADD COLUMN city_id INT AFTER birthday;

ALTER TABLE media ADD COLUMN is_shared BOOLEAN AFTER user_id;

ALTER TABLE communities ADD COLUMN decription VARCHAR(255) AFTER name;



SHOW TABLES;

-- Анализируем данные пользователей
SELECT * FROM users LIMIT 10;

-- Смотрим структуру таблицы пользователей
DESC users;

-- Приводим в порядок временные метки
UPDATE users SET updated_at = NOW() WHERE updated_at < created_at;                 

-- Смотрим структуру профилей
DESC profiles;

-- Анализируем данные
SELECT * FROM profiles LIMIT 10;

SELECT * FROM cities;

UPDATE profiles SET city_id = FLOOR(1 + RAND() * 100);

-- Смотрим таблицу стран
SELECT * FROM countries LIMIT 10;

-- Заполняем таблицу стрвн
INSERT INTO countries (name) (SELECT country FROM profiles);

-- Заполняем таблицу городов
SELECT * FROM cities LIMIT 10;
INSERT INTO cities (name) (SELECT city FROM profiles);
UPDATE cities SET country_id = FLOOR(1 + RAND() * 100);

-- Удаляем ненужные столбцы
ALTER TABLE profiles DROP COLUMN city;
ALTER TABLE profiles DROP COLUMN country;

-- Смотрим структуру таблицы сообщений
DESC messages;

-- Анализируем данные
SELECT * FROM messages LIMIT 10;

-- Исправляем ссылки на пользователей
UPDATE messages SET
  from_user_id = FLOOR(1 + RAND() * 100),
  to_user_id = FLOOR(1 + RAND() * 100);

-- Смотрим структуру таблицы медиаконтента 
DESC media;

-- Анализируем данные
SELECT * FROM media LIMIT 10;

-- Заполняем признак общего доступа
UPDATE media SET is_shared = FLOOR(0 + RAND() * 2);

-- Обновляем ссылку на пользователя - владельца
UPDATE media SET user_id = FLOOR(1 + RAND() * 100);

-- Создаём временную таблицу форматов медиафайлов
CREATE TEMPORARY TABLE extensions (name VARCHAR(10));

-- Заполняем значениями
INSERT INTO extensions VALUES ('jpeg'), ('mp4'), ('mp3'), ('avi'), ('png');

-- Проверяем
SELECT * FROM extensions;

-- Обновляем ссылку на файл
UPDATE media SET filename = CONCAT(
  'http://dropbox.net/vk/',
  filename,
  '.',
  (SELECT name FROM extensions ORDER BY RAND() LIMIT 1)
);

-- Обновляем размер файлов
UPDATE media SET size = FLOOR(10000 + (RAND() * 1000000)) WHERE size < 1000;

-- Заполняем метаданные
UPDATE media SET metadata = CONCAT('{"owner":"', 
  (SELECT CONCAT(first_name, ' ', last_name) FROM users WHERE id = user_id),
  '"}');  

-- Возвращаем столбцу метеданных правильный тип, если нужно
ALTER TABLE media MODIFY COLUMN metadata JSON;

-- Анализируем типы медиаконтента
SELECT * FROM media_types;

-- Удаляем все типы
DELETE FROM media_types;

-- Добавляем нужные типы
INSERT INTO media_types (name) VALUES
  ('photo'),
  ('video'),
  ('audio')
;

-- DELETE не сбрасывает счётчик автоинкрементирования,
-- поэтому применим TRUNCATE
TRUNCATE media_types;

-- Анализируем данные
SELECT * FROM media LIMIT 10;

-- Обновляем данные для ссылки на тип
UPDATE media SET media_type_id = FLOOR(1 + RAND() * 3);

-- Смотрим структуру таблицы дружбы
DESC friendship;

-- Анализируем данные
SELECT * FROM friendship LIMIT 10;

-- Обновляем ссылки на друзей
UPDATE friendship SET 
  user_id = FLOOR(1 + RAND() * 100),
  friend_id = FLOOR(1 + RAND() * 100);

-- Исправляем случай когда user_id = friend_id
UPDATE friendship SET friend_id = friend_id + 1 WHERE user_id = friend_id;

-- Проставим значения rejected_at
UPDATE friendship SET rejected_at = updated_at WHERE FLOOR(0 + RAND() * 2);

-- Проставим значения rejected_by_id
UPDATE friendship SET rejected_by_id = FLOOR(1 + RAND() * 100) WHERE rejected_at IS NOT NULL;
 
-- Анализируем данные 
SELECT * FROM friendship_statuses;

-- Очищаем таблицу
TRUNCATE friendship_statuses;

-- Вставляем значения статусов дружбы
INSERT INTO friendship_statuses (name) VALUES
  ('Requested'),
  ('Confirmed'),
  ('Rejected');
 
-- Обновляем ссылки на статус 
UPDATE friendship SET friendship_status_id = FLOOR(1 + RAND() * 3); 

-- Проставляем верный статус для rejected
UPDATE friendship SET friendship_status_id = 3 WHERE rejected_at IS NOT NULL;


-- Смотрим структуру таблицы групп
DESC communities;

-- Анализируем данные
SELECT * FROM communities;

-- Удаляем часть групп
DELETE FROM communities WHERE id > 30;

-- Анализируем таблицу связи пользователей и групп
SELECT * FROM communities_users;

-- Очищаем таблицу
TRUNCATE communities_users;

-- Заполняем новыми значениями
UPDATE communities_users SET
  user_id = FLOOR(1 + RAND() * 100),
  community_id = FLOOR(1 + RAND() * 30);
